# ============================================================================
# MAINTENANCE HEBDOMADAIRE GUIGNOMAP
# ============================================================================
# Script PowerShell pour maintenance automatis√©e hebdomadaire
# Usage: .\scripts\maintenance_weekly.ps1

param(
    [string]$City = "mascouche",
    [string]$ExcelFile = "imports/mascouche_adresses.xlsx"
)

# Configuration
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# Couleurs pour output
function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) { Write-Output $args }
    else { $input | Write-Output }
    $host.UI.RawUI.ForegroundColor = $fc
}

function Write-Success { Write-ColorOutput Green $args }
function Write-Warning { Write-ColorOutput Yellow $args }
function Write-Error { Write-ColorOutput Red $args }
function Write-Info { Write-ColorOutput Cyan $args }

# V√©rifier l'environnement
Write-Info "üîç V√©rification de l'environnement..."

if (!(Test-Path ".venv\Scripts\python.exe")) {
    Write-Error "‚ùå Environnement virtuel non trouv√©. Ex√©cutez d'abord le setup."
    exit 1
}

if (!(Test-Path $ExcelFile)) {
    Write-Warning "‚ö†Ô∏è  Fichier Excel non trouv√©: $ExcelFile"
    Write-Info "Maintenance continuera sans v√©rification Excel..."
}

# Cr√©er r√©pertoire exports/maintenance si n√©cessaire
$MaintenanceDir = "exports/maintenance"
if (!(Test-Path $MaintenanceDir)) {
    New-Item -ItemType Directory -Path $MaintenanceDir -Force | Out-Null
    Write-Success "üìÅ Cr√©√© r√©pertoire: $MaintenanceDir"
}

# Date pour nommage des fichiers
$DateStamp = Get-Date -Format "yyyyMMdd_HHmm"

Write-Success "üöÄ D√©but maintenance hebdomadaire - $DateStamp"
Write-Info "   Ville: $City"
Write-Info "   Excel: $ExcelFile"

# 1. VERIFICATION DES ADRESSES
if (Test-Path $ExcelFile) {
    Write-Info "üìã 1. V√©rification des adresses Excel vs DB..."
    try {
        & ".\.venv\Scripts\python.exe" "scripts\verify_addresses.py" --city $City --file $ExcelFile
        Write-Success "‚úÖ V√©rification des adresses termin√©e"
    }
    catch {
        Write-Warning "‚ö†Ô∏è  Erreur lors de la v√©rification: $_"
    }
}
else {
    Write-Warning "‚è≠Ô∏è  V√©rification Excel ignor√©e (fichier manquant)"
}

# 2. ENRICHISSEMENT OSM
Write-Info "üó∫Ô∏è  2. Enrichissement des adresses depuis OSM..."
try {
    & ".\.venv\Scripts\python.exe" "scripts\enrich_addresses_from_osm.py"
    Write-Success "‚úÖ Enrichissement OSM termin√©"
}
catch {
    Write-Warning "‚ö†Ô∏è  Erreur lors de l'enrichissement OSM: $_"
}

# 3. EXPORT DES STATISTIQUES
Write-Info "üìä 3. Export des statistiques..."
$StatsFile = "$MaintenanceDir\stats_$DateStamp.csv"

try {
    # G√©n√©rer les stats via Python et sauvegarder en CSV
    $StatsScript = @"
import sys
import csv
from pathlib import Path
from datetime import datetime

# Ajouter le projet au path
sys.path.insert(0, str(Path(__file__).parent.parent))

from guignomap.database import stats_addresses, extended_stats, stats_by_team

# R√©cup√©rer toutes les stats
addr_stats = stats_addresses()
ext_stats = extended_stats()
team_stats = stats_by_team()

# Cr√©er le fichier CSV
with open('$StatsFile', 'w', newline='', encoding='utf-8') as f:
    writer = csv.writer(f)
    
    # En-t√™tes
    writer.writerow(['Type', 'M√©trique', 'Valeur', 'Timestamp'])
    
    # Stats adresses
    timestamp = datetime.now().isoformat()
    writer.writerow(['Adresses', 'Total', addr_stats['total'], timestamp])
    writer.writerow(['Adresses', 'Non assign√©es', addr_stats['unassigned'], timestamp])
    writer.writerow(['Adresses', 'Assign√©es', addr_stats['assigned'], timestamp])
    
    # Stats √©tendues
    writer.writerow(['Rues', 'Total', ext_stats['streets_count'], timestamp])
    writer.writerow(['Rues', '√Ä faire', ext_stats['todo_streets'], timestamp])
    writer.writerow(['Rues', 'En cours', ext_stats['partial_streets'], timestamp])
    writer.writerow(['Rues', 'Termin√©es', ext_stats['done_streets'], timestamp])
    
    # Stats √©quipes
    writer.writerow(['√âquipes', 'Total actives', len([t for t in team_stats if t['active']]), timestamp])
    writer.writerow(['√âquipes', 'Total', len(team_stats), timestamp])

print(f'Stats export√©es vers: $StatsFile')
"@

    $StatsScript | & ".\.venv\Scripts\python.exe" -
    Write-Success "‚úÖ Statistiques export√©es: $StatsFile"
}
catch {
    Write-Warning "‚ö†Ô∏è  Erreur lors de l'export des stats: $_"
}

# 4. BACKUP DE LA BASE DE DONN√âES
Write-Info "üíæ 4. Backup de la base de donn√©es..."
$BackupFile = "$MaintenanceDir\guigno_map_backup_$DateStamp.db"

try {
    Copy-Item "guignomap\guigno_map.db" $BackupFile
    
    # Compression du backup
    $BackupZip = "$MaintenanceDir\guigno_map_backup_$DateStamp.zip"
    Compress-Archive -Path $BackupFile -DestinationPath $BackupZip -Force
    Remove-Item $BackupFile  # Supprimer la version non compress√©e
    
    $BackupSize = [math]::Round((Get-Item $BackupZip).Length / 1MB, 2)
    Write-Success "‚úÖ Backup cr√©√©: $BackupZip ($BackupSize MB)"
}
catch {
    Write-Warning "‚ö†Ô∏è  Erreur lors du backup: $_"
}

# 5. NETTOYAGE DES ANCIENS FICHIERS (garde les 30 derniers jours)
Write-Info "üßπ 5. Nettoyage des anciens fichiers de maintenance..."
try {
    $CutoffDate = (Get-Date).AddDays(-30)
    $OldFiles = Get-ChildItem $MaintenanceDir -File | Where-Object { $_.LastWriteTime -lt $CutoffDate }
    
    if ($OldFiles) {
        $OldFiles | Remove-Item -Force
        Write-Success "‚úÖ Supprim√©s $($OldFiles.Count) anciens fichiers"
    }
    else {
        Write-Info "‚ÑπÔ∏è  Aucun ancien fichier √† supprimer"
    }
}
catch {
    Write-Warning "‚ö†Ô∏è  Erreur lors du nettoyage: $_"
}

# R√âSUM√â FINAL
Write-Success ""
Write-Success "üéâ MAINTENANCE HEBDOMADAIRE TERMIN√âE"
Write-Success "=" * 50
Write-Info "Fichiers g√©n√©r√©s:"
if (Test-Path $StatsFile) { Write-Info "  üìä Stats: $StatsFile" }
if (Test-Path $BackupZip) { Write-Info "  üíæ Backup: $BackupZip" }
Write-Info ""
Write-Info "Pour programmer cette maintenance:"
Write-Info "  schtasks /create /tn `"GuignoMap Weekly`" /tr `"powershell.exe -File $(Join-Path $PWD 'scripts\maintenance_weekly.ps1')`" /sc weekly /d SUN /st 02:00"
Write-Success ""